name: Continuous Monitoring & Alerting

on:
  schedule:
    # Run every 15 minutes during market hours (9:30 AM - 4:00 PM EST, Mon-Fri)
    - cron: '*/15 13-21 * * 1-5'  # UTC time
    # Run every hour outside market hours for basic health checks
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of monitoring check'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - health
        - api
        - performance

permissions:
  contents: read
  issues: write

jobs:
  health-monitoring:
    runs-on: ubuntu-latest
    if: ${{ inputs.check_type == 'all' || inputs.check_type == 'health' || github.event_name == 'schedule' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Health Check - Site Availability
        id: site-health
        continue-on-error: true
        run: |
          SITE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "Checking site health: $SITE_URL"
          
          # Check response time and status
          RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null "$SITE_URL" || echo "timeout")
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" || echo "000")
          
          echo "status_code=$STATUS_CODE" >> $GITHUB_OUTPUT
          echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
          
          if [ "$STATUS_CODE" != "200" ]; then
            echo "‚ùå Site health check failed - HTTP $STATUS_CODE"
            echo "health_status=failed" >> $GITHUB_OUTPUT
            exit 1
          elif (( $(echo "$RESPONSE_TIME > 5.0" | bc -l) )); then
            echo "‚ö†Ô∏è Site responding slowly - ${RESPONSE_TIME}s"
            echo "health_status=slow" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Site health check passed - ${RESPONSE_TIME}s"
            echo "health_status=ok" >> $GITHUB_OUTPUT
          fi
          
      - name: Alert on Site Health Issues
        if: steps.site-health.outputs.health_status == 'failed'
        uses: actions/github-script@v7
        with:
          script: |
            const statusCode = '${{ steps.site-health.outputs.status_code }}';
            const responseTime = '${{ steps.site-health.outputs.response_time }}';
            
            const body = `üö® **CRITICAL: Site Health Check Failed**
            
            **Status Code:** ${statusCode}
            **Response Time:** ${responseTime}s
            **Check Time:** ${new Date().toISOString()}
            **Site URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
            
            The site is not responding correctly. This requires immediate attention.
            
            **Possible Causes:**
            - GitHub Pages service issue
            - Invalid deployment
            - DNS resolution problems
            - CDN issues
            
            [View Monitoring Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            // Check if there's already an open issue for site health
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'critical,site-health,monitoring',
              state: 'open'
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üö® CRITICAL: Site Health Failure - HTTP ${statusCode}`,
                body: body,
                labels: ['critical', 'site-health', 'monitoring']
              });
            } else {
              // Update existing issue with new information
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues.data[0].number,
                body: `**Update:** Health check still failing at ${new Date().toISOString()}\n\n**Status:** HTTP ${statusCode}\n**Response Time:** ${responseTime}s`
              });
            }

  api-monitoring:
    runs-on: ubuntu-latest
    if: ${{ inputs.check_type == 'all' || inputs.check_type == 'api' || github.event_name == 'schedule' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Monitor External APIs
        id: api-monitor
        continue-on-error: true
        run: |
          echo "Monitoring external API dependencies..."
          
          # Fear & Greed Index API
          echo "Testing Fear & Greed Index API..."
          FNG_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://api.alternative.me/fng/" || echo "000")
          FNG_TIME=$(curl -w "%{time_total}" -s -o /dev/null "https://api.alternative.me/fng/" || echo "timeout")
          
          # Yahoo Finance API
          echo "Testing Yahoo Finance API..."
          YAHOO_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://query1.finance.yahoo.com/v8/finance/chart/SPY?interval=1d&range=1d" || echo "000")
          YAHOO_TIME=$(curl -w "%{time_total}" -s -o /dev/null "https://query1.finance.yahoo.com/v8/finance/chart/SPY?interval=1d&range=1d" || echo "timeout")
          
          echo "fng_status=$FNG_STATUS" >> $GITHUB_OUTPUT
          echo "fng_time=$FNG_TIME" >> $GITHUB_OUTPUT
          echo "yahoo_status=$YAHOO_STATUS" >> $GITHUB_OUTPUT
          echo "yahoo_time=$YAHOO_TIME" >> $GITHUB_OUTPUT
          
          # Check for failures
          FAILED_APIS=""
          if [ "$FNG_STATUS" != "200" ]; then
            FAILED_APIS="$FAILED_APIS Fear&Greed(HTTP $FNG_STATUS)"
          fi
          if [ "$YAHOO_STATUS" != "200" ]; then
            FAILED_APIS="$FAILED_APIS Yahoo(HTTP $YAHOO_STATUS)"
          fi
          
          echo "failed_apis=$FAILED_APIS" >> $GITHUB_OUTPUT
          
          if [ -n "$FAILED_APIS" ]; then
            echo "‚ùå API monitoring failed: $FAILED_APIS"
            exit 1
          else
            echo "‚úÖ All APIs responding correctly"
            echo "Fear & Greed: ${FNG_TIME}s, Yahoo: ${YAHOO_TIME}s"
          fi
          
      - name: Check API Rate Limits
        id: rate-limits
        continue-on-error: true
        run: |
          echo "Checking API rate limit usage..."
          
          # Simulate checking rate limits (in real scenario, you'd check headers)
          # Yahoo Finance doesn't provide explicit rate limit headers, so we monitor response patterns
          
          # Test multiple rapid requests to check for rate limiting
          echo "Testing rate limits with rapid requests..."
          SUCCESS_COUNT=0
          TOTAL_REQUESTS=10
          
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://query1.finance.yahoo.com/v8/finance/chart/SPY?interval=1d&range=1d" || echo "000")
            if [ "$STATUS" = "200" ]; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
            sleep 1
          done
          
          SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_REQUESTS))
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          
          if [ $SUCCESS_RATE -lt 80 ]; then
            echo "‚ö†Ô∏è Possible rate limiting detected - Success rate: $SUCCESS_RATE%"
            echo "rate_limit_warning=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No rate limiting detected - Success rate: $SUCCESS_RATE%"
            echo "rate_limit_warning=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Alert on API Issues
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const failedApis = '${{ steps.api-monitor.outputs.failed_apis }}';
            const fngStatus = '${{ steps.api-monitor.outputs.fng_status }}';
            const yahooStatus = '${{ steps.api-monitor.outputs.yahoo_status }}';
            const successRate = '${{ steps.rate-limits.outputs.success_rate }}';
            const rateLimitWarning = '${{ steps.rate-limits.outputs.rate_limit_warning }}';
            
            let alertLevel = 'high';
            let title = '‚ö†Ô∏è API Monitoring Alert';
            
            if (failedApis) {
              alertLevel = 'critical';
              title = 'üö® CRITICAL: API Failure Detected';
            }
            
            const body = `${alertLevel === 'critical' ? 'üö®' : '‚ö†Ô∏è'} **API Monitoring Alert**
            
            **Check Time:** ${new Date().toISOString()}
            **Failed APIs:** ${failedApis || 'None'}
            **Rate Limit Warning:** ${rateLimitWarning}
            **Success Rate:** ${successRate}%
            
            **API Status Details:**
            - Fear & Greed Index: HTTP ${fngStatus} (${fngStatus === '200' ? '‚úÖ' : '‚ùå'})
            - Yahoo Finance: HTTP ${yahooStatus} (${yahooStatus === '200' ? '‚úÖ' : '‚ùå'})
            
            **Impact:**
            ${failedApis ? '- Data may be stale or unavailable' : ''}
            ${rateLimitWarning === 'true' ? '- Rate limiting may affect data updates' : ''}
            
            **Action Required:**
            ${failedApis ? '- Investigate API endpoint status' : ''}
            ${failedApis ? '- Consider fallback data sources' : ''}
            ${rateLimitWarning === 'true' ? '- Review API usage patterns' : ''}
            
            [View Monitoring Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: [alertLevel, 'api-monitoring', 'monitoring']
            });

  performance-monitoring:
    runs-on: ubuntu-latest
    if: ${{ inputs.check_type == 'all' || inputs.check_type == 'performance' || github.event_name == 'schedule' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Performance Audit
        id: performance
        continue-on-error: true
        run: |
          SITE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "Running performance audit on: $SITE_URL"
          
          # Run Lighthouse audit
          lhci autorun --upload.target=temporary-public-storage --collect.url="$SITE_URL" || true
          
          # Create a basic performance check using curl
          echo "Basic performance metrics:"
          
          # Measure load times
          LOAD_TIME=$(curl -w "%{time_total}" -s -o /dev/null "$SITE_URL" || echo "timeout")
          TTFB=$(curl -w "%{time_starttransfer}" -s -o /dev/null "$SITE_URL" || echo "timeout")
          
          echo "load_time=$LOAD_TIME" >> $GITHUB_OUTPUT
          echo "ttfb=$TTFB" >> $GITHUB_OUTPUT
          
          # Performance thresholds
          LOAD_THRESHOLD=3.0
          TTFB_THRESHOLD=1.0
          
          PERFORMANCE_ISSUES=""
          
          if (( $(echo "$LOAD_TIME > $LOAD_THRESHOLD" | bc -l) )); then
            PERFORMANCE_ISSUES="$PERFORMANCE_ISSUES Slow-Load-Time(${LOAD_TIME}s)"
          fi
          
          if (( $(echo "$TTFB > $TTFB_THRESHOLD" | bc -l) )); then
            PERFORMANCE_ISSUES="$PERFORMANCE_ISSUES High-TTFB(${TTFB}s)"
          fi
          
          echo "performance_issues=$PERFORMANCE_ISSUES" >> $GITHUB_OUTPUT
          
          if [ -n "$PERFORMANCE_ISSUES" ]; then
            echo "‚ö†Ô∏è Performance issues detected: $PERFORMANCE_ISSUES"
            exit 1
          else
            echo "‚úÖ Performance metrics within acceptable limits"
            echo "Load Time: ${LOAD_TIME}s, TTFB: ${TTFB}s"
          fi
          
      - name: Alert on Performance Issues
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const loadTime = '${{ steps.performance.outputs.load_time }}';
            const ttfb = '${{ steps.performance.outputs.ttfb }}';
            const issues = '${{ steps.performance.outputs.performance_issues }}';
            
            const body = `‚ö†Ô∏è **Performance Monitoring Alert**
            
            **Check Time:** ${new Date().toISOString()}
            **Issues Detected:** ${issues}
            
            **Metrics:**
            - Load Time: ${loadTime}s (threshold: 3.0s)
            - Time to First Byte: ${ttfb}s (threshold: 1.0s)
            
            **Impact:**
            - Poor user experience
            - Potential SEO impact
            - Higher bounce rates
            
            **Recommended Actions:**
            - Optimize image sizes and formats
            - Review and minimize JavaScript bundles
            - Check CDN configuration
            - Analyze third-party dependencies
            
            [View Monitoring Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `‚ö†Ô∏è Performance Degradation Detected`,
              body: body,
              labels: ['medium', 'performance', 'monitoring']
            });

  cleanup-resolved-issues:
    runs-on: ubuntu-latest
    needs: [health-monitoring, api-monitoring, performance-monitoring]
    if: always()
    
    steps:
      - name: Close resolved monitoring issues
        uses: actions/github-script@v7
        with:
          script: |
            // Get all open monitoring issues
            const openIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'monitoring',
              state: 'open'
            });
            
            console.log(`Found ${openIssues.data.length} open monitoring issues`);
            
            // Check if current run had any failures
            const healthSuccess = '${{ needs.health-monitoring.result }}' === 'success';
            const apiSuccess = '${{ needs.api-monitoring.result }}' === 'success';
            const perfSuccess = '${{ needs.performance-monitoring.result }}' === 'success';
            
            // Close issues that are now resolved
            for (const issue of openIssues.data) {
              const labels = issue.labels.map(l => l.name);
              let shouldClose = false;
              
              if (labels.includes('site-health') && healthSuccess) {
                shouldClose = true;
              } else if (labels.includes('api-monitoring') && apiSuccess) {
                shouldClose = true;
              } else if (labels.includes('performance') && perfSuccess) {
                shouldClose = true;
              }
              
              if (shouldClose) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `‚úÖ **Issue Resolved**\n\nMonitoring checks are now passing. Auto-closing this issue.\n\n**Resolution Time:** ${new Date().toISOString()}\n**Run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
                });
                
                console.log(`Closed resolved issue #${issue.number}: ${issue.title}`);
              }
            }