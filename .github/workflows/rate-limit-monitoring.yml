name: API Rate Limit Monitoring

on:
  schedule:
    # Check every 10 minutes during market hours
    - cron: '*/10 13-21 * * 1-5'  # UTC time (9:30 AM - 4:00 PM EST, Mon-Fri)
    # Check every 30 minutes outside market hours
    - cron: '*/30 0-13,21-23 * * *'
    - cron: '*/30 * * * 0,6'  # Weekends
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  rate-limit-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Fear & Greed API Rate Limits
        id: fear-greed-check
        continue-on-error: true
        run: |
          echo "Testing Fear & Greed API rate limits..."
          
          # Test rapid requests to check for rate limiting
          SUCCESS_COUNT=0
          RATE_LIMITED_COUNT=0
          TOTAL_REQUESTS=20
          RESPONSE_TIMES=()
          
          for i in $(seq 1 $TOTAL_REQUESTS); do
            START_TIME=$(date +%s%N)
            RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/fng_response_$i "https://api.alternative.me/fng/" || echo "000")
            END_TIME=$(date +%s%N)
            RESPONSE_TIME=$(( ($END_TIME - $START_TIME) / 1000000 ))
            RESPONSE_TIMES+=($RESPONSE_TIME)
            
            if [ "$RESPONSE" = "200" ]; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            elif [ "$RESPONSE" = "429" ] || [ "$RESPONSE" = "503" ]; then
              RATE_LIMITED_COUNT=$((RATE_LIMITED_COUNT + 1))
            fi
            
            # Small delay between requests
            sleep 0.5
          done
          
          SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_REQUESTS))
          RATE_LIMIT_RATE=$((RATE_LIMITED_COUNT * 100 / TOTAL_REQUESTS))
          
          # Calculate average response time
          AVG_RESPONSE_TIME=0
          if [ ${#RESPONSE_TIMES[@]} -gt 0 ]; then
            SUM=0
            for time in "${RESPONSE_TIMES[@]}"; do
              SUM=$((SUM + time))
            done
            AVG_RESPONSE_TIME=$((SUM / ${#RESPONSE_TIMES[@]}))
          fi
          
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "rate_limit_rate=$RATE_LIMIT_RATE" >> $GITHUB_OUTPUT
          echo "avg_response_time=$AVG_RESPONSE_TIME" >> $GITHUB_OUTPUT
          echo "total_requests=$TOTAL_REQUESTS" >> $GITHUB_OUTPUT
          
          echo "Fear & Greed API Results:"
          echo "Success Rate: $SUCCESS_RATE%"
          echo "Rate Limited: $RATE_LIMIT_RATE%"
          echo "Average Response Time: ${AVG_RESPONSE_TIME}ms"
          
          # Check if we're hitting rate limits
          if [ $RATE_LIMIT_RATE -gt 15 ]; then
            echo "‚ö†Ô∏è High rate limiting detected!"
            echo "rate_limit_warning=true" >> $GITHUB_OUTPUT
            exit 1
          elif [ $SUCCESS_RATE -lt 90 ]; then
            echo "‚ö†Ô∏è Low success rate detected!"
            echo "rate_limit_warning=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Rate limits within acceptable range"
            echo "rate_limit_warning=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Yahoo Finance API Rate Limits
        id: yahoo-check
        continue-on-error: true
        run: |
          echo "Testing Yahoo Finance API rate limits..."
          
          # Test multiple symbols to simulate real usage
          SYMBOLS=("SPY" "QQQ" "IWM" "^VIX")
          SUCCESS_COUNT=0
          RATE_LIMITED_COUNT=0
          TOTAL_REQUESTS=0
          RESPONSE_TIMES=()
          
          for symbol in "${SYMBOLS[@]}"; do
            for i in $(seq 1 5); do  # 5 requests per symbol
              TOTAL_REQUESTS=$((TOTAL_REQUESTS + 1))
              START_TIME=$(date +%s%N)
              RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/yahoo_response_${symbol}_$i \
                "https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d" || echo "000")
              END_TIME=$(date +%s%N)
              RESPONSE_TIME=$(( ($END_TIME - $START_TIME) / 1000000 ))
              RESPONSE_TIMES+=($RESPONSE_TIME)
              
              if [ "$RESPONSE" = "200" ]; then
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              elif [ "$RESPONSE" = "429" ] || [ "$RESPONSE" = "503" ]; then
                RATE_LIMITED_COUNT=$((RATE_LIMITED_COUNT + 1))
              fi
              
              # Delay between requests to avoid being too aggressive
              sleep 1
            done
          done
          
          SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_REQUESTS))
          RATE_LIMIT_RATE=$((RATE_LIMITED_COUNT * 100 / TOTAL_REQUESTS))
          
          # Calculate average response time
          AVG_RESPONSE_TIME=0
          if [ ${#RESPONSE_TIMES[@]} -gt 0 ]; then
            SUM=0
            for time in "${RESPONSE_TIMES[@]}"; do
              SUM=$((SUM + time))
            done
            AVG_RESPONSE_TIME=$((SUM / ${#RESPONSE_TIMES[@]}))
          fi
          
          echo "yahoo_success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "yahoo_rate_limit_rate=$RATE_LIMIT_RATE" >> $GITHUB_OUTPUT
          echo "yahoo_avg_response_time=$AVG_RESPONSE_TIME" >> $GITHUB_OUTPUT
          echo "yahoo_total_requests=$TOTAL_REQUESTS" >> $GITHUB_OUTPUT
          
          echo "Yahoo Finance API Results:"
          echo "Success Rate: $SUCCESS_RATE%"
          echo "Rate Limited: $RATE_LIMIT_RATE%"  
          echo "Average Response Time: ${AVG_RESPONSE_TIME}ms"
          
          # Check if we're hitting rate limits
          if [ $RATE_LIMIT_RATE -gt 10 ]; then
            echo "‚ö†Ô∏è High rate limiting detected!"
            echo "yahoo_rate_limit_warning=true" >> $GITHUB_OUTPUT
            exit 1
          elif [ $SUCCESS_RATE -lt 85 ]; then
            echo "‚ö†Ô∏è Low success rate detected!"
            echo "yahoo_rate_limit_warning=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Rate limits within acceptable range"
            echo "yahoo_rate_limit_warning=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Rate Limit Report
        if: always()
        run: |
          echo "=== API Rate Limit Monitoring Report ==="
          echo "Timestamp: $(date -u)"
          echo ""
          echo "Fear & Greed Index API:"
          echo "  Success Rate: ${{ steps.fear-greed-check.outputs.success_rate }}%"
          echo "  Rate Limited: ${{ steps.fear-greed-check.outputs.rate_limit_rate }}%"
          echo "  Avg Response Time: ${{ steps.fear-greed-check.outputs.avg_response_time }}ms"
          echo "  Total Requests: ${{ steps.fear-greed-check.outputs.total_requests }}"
          echo ""
          echo "Yahoo Finance API:"
          echo "  Success Rate: ${{ steps.yahoo-check.outputs.yahoo_success_rate }}%"
          echo "  Rate Limited: ${{ steps.yahoo-check.outputs.yahoo_rate_limit_rate }}%"
          echo "  Avg Response Time: ${{ steps.yahoo-check.outputs.yahoo_avg_response_time }}ms"
          echo "  Total Requests: ${{ steps.yahoo-check.outputs.yahoo_total_requests }}"

      - name: Alert on Rate Limit Issues
        if: failure()  # This runs if any of the previous steps failed
        uses: actions/github-script@v7
        with:
          script: |
            const fngWarning = '${{ steps.fear-greed-check.outputs.rate_limit_warning }}' === 'true';
            const yahooWarning = '${{ steps.yahoo-check.outputs.yahoo_rate_limit_warning }}' === 'true';
            
            let alertLevel = 'medium';
            let title = '‚ö†Ô∏è API Rate Limit Warning';
            let alertSeverity = 'WARNING';
            
            // Determine alert severity
            const fngRateLimit = parseInt('${{ steps.fear-greed-check.outputs.rate_limit_rate }}' || '0');
            const yahooRateLimit = parseInt('${{ steps.yahoo-check.outputs.yahoo_rate_limit_rate }}' || '0');
            
            if (fngRateLimit > 25 || yahooRateLimit > 20) {
              alertLevel = 'high';
              title = 'üö® CRITICAL: API Rate Limit Exceeded';
              alertSeverity = 'CRITICAL';
            }
            
            const body = `${alertSeverity === 'CRITICAL' ? 'üö®' : '‚ö†Ô∏è'} **${alertSeverity}: API Rate Limit Alert**
            
            **Check Time:** ${new Date().toISOString()}
            **Alert Level:** ${alertLevel.toUpperCase()}
            
            ## Rate Limit Status
            
            ### Fear & Greed Index API
            - **Success Rate:** ${{ steps.fear-greed-check.outputs.success_rate }}%
            - **Rate Limited:** ${{ steps.fear-greed-check.outputs.rate_limit_rate }}%
            - **Avg Response Time:** ${{ steps.fear-greed-check.outputs.avg_response_time }}ms
            - **Status:** ${fngWarning ? '‚ùå WARNING' : '‚úÖ OK'}
            
            ### Yahoo Finance API
            - **Success Rate:** ${{ steps.yahoo-check.outputs.yahoo_success_rate }}%
            - **Rate Limited:** ${{ steps.yahoo-check.outputs.yahoo_rate_limit_rate }}%
            - **Avg Response Time:** ${{ steps.yahoo-check.outputs.yahoo_avg_response_time }}ms
            - **Status:** ${yahooWarning ? '‚ùå WARNING' : '‚úÖ OK'}
            
            ## Impact Analysis
            ${fngWarning ? '- Fear & Greed Index data may be stale or unavailable' : ''}
            ${yahooWarning ? '- Stock and VIX data updates may be delayed or fail' : ''}
            ${(fngWarning || yahooWarning) ? '- User experience may be degraded with stale data' : ''}
            ${alertSeverity === 'CRITICAL' ? '- **IMMEDIATE ACTION REQUIRED**' : ''}
            
            ## Recommended Actions
            1. **Monitor API usage patterns** - Review application logs for excessive requests
            2. **Implement request throttling** - Add delays between API calls if needed
            3. **Cache optimization** - Extend cache duration to reduce API calls
            4. **Fallback strategies** - Use cached data when rate limits are hit
            ${alertSeverity === 'CRITICAL' ? '5. **Emergency response** - Consider temporarily reducing update frequency' : ''}
            
            ## Monitoring Data
            - **Run ID:** ${{ github.run_id }}
            - **Workflow:** ${{ github.workflow }}
            - **Branch:** ${{ github.ref }}
            
            [View Detailed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            // Check for existing rate limit issues
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'rate-limit,monitoring',
              state: 'open'
            });
            
            if (existingIssues.data.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: [alertLevel, 'rate-limit', 'monitoring', 'api']
              });
            } else {
              // Update existing issue
              const issue = existingIssues.data[0];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `**Update:** Rate limit monitoring at ${new Date().toISOString()}\n\n${body.split('\n').slice(3).join('\n')}`
              });
              
              // Update issue title if severity changed
              if (alertSeverity === 'CRITICAL' && !issue.title.includes('CRITICAL')) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  title: title
                });
              }
            }

      - name: Success Notification
        if: success()
        run: |
          echo "‚úÖ All API rate limit checks passed successfully"
          echo "Fear & Greed API: ${{ steps.fear-greed-check.outputs.success_rate }}% success rate"
          echo "Yahoo Finance API: ${{ steps.yahoo-check.outputs.yahoo_success_rate }}% success rate"